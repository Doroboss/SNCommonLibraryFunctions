<?xml version="1.0" encoding="UTF-8"?><unload unload_date="2020-05-12 12:50:09">
<sys_remote_update_set action="INSERT_OR_UPDATE">
<application display_value="Global">global</application>
<application_name>Global</application_name>
<application_scope>global</application_scope>
<application_version/>
<collisions/>
<commit_date/>
<deleted/>
<description>This contains a script include that contains common functions that can be reused across modules.</description>
<inserted/>
<name>CommonLibraryFunctions-V1.0</name>
<origin_sys_id/>
<parent display_value=""/>
<release_date/>
<remote_base_update_set display_value=""/>
<remote_parent_id/>
<remote_sys_id>24f679ac1b701c508ed631d7dc4bcb93</remote_sys_id>
<state>loaded</state>
<summary/>
<sys_class_name>sys_remote_update_set</sys_class_name>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2020-05-12 12:50:09</sys_created_on>
<sys_id>24f38e201bf01c508ed631d7dc4bcbb5</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2020-05-12 12:50:09</sys_updated_on>
<update_set display_value=""/>
<update_source display_value=""/>
<updated/>
</sys_remote_update_set>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Global">global</application>
<category>customer</category>
<comments/>
<name>sys_script_include_25cea0051b5680108ed631d7dc4bcb6b</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;global.CommonLibraryFunctions&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;true&lt;/client_callable&gt;&lt;description&gt;This script include is meant to holds reusable functions that can be reused across modules.&amp;#13;
This contains both client and server side functions.&lt;/description&gt;&lt;name&gt;CommonLibraryFunctions&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var CommonLibraryFunctions = Class.create();
CommonLibraryFunctions.prototype = Object.extendsObject(AbstractAjaxProcessor, {

    /**
     * Utility function that checks if the record exists or not
     * Can be used on both server and client side
     *
     * @param {string} tableName - is the table to be searched
     * @param {string} filterString - is the filter to be used for searching the record
     * @returns {boolean} - indicates whether the record exists or not
     */

    hasValidRecord: function(tableName, filterString) {
        var answer = false;
        try {
            if (typeof tableName == 'undefined' &amp;&amp; typeof filterString == 'undefined') {
                tableName = this.getParameter('sysparm_table_name');
                filterString = this.getParameter('sysparm_filter_string');
            }
            if (JSUtil.notNil(tableName) &amp;&amp; JSUtil.notNil(filterString)) {
                var getRecord = new GlideRecord(tableName);
                getRecord.addEncodedQuery(filterString);
                getRecord.setLimit(1);
                getRecord.query();

                if (getRecord.hasNext()) {
                    answer = true;
                }
            }
        } catch (err) {
            this.customErrorLogger('Error in hasValidRecord-' + err.toString(), 'CommonLibraryFunctions', 'error');
        }

        return answer;
    },
	
	/**
     * Utility function that returns the gliderecord object.
     *
     * @param {string} tableName - is the table to be searched
     * @param {string} filterString - is the filter to be used for searching the record
     * @returns {object} - indicates whether the record exists or not
     */

    getRecord: function(tableName, filterString) {

        try {
            if (JSUtil.notNil(tableName) &amp;&amp; JSUtil.notNil(filterString)) {
                var gRecord = new GlideRecord(tableName);
                gRecord.addEncodedQuery(filterString);
                gRecord.setLimit(1);
                gRecord.query();

                if (gRecord.next()) {
                    return gRecord;
                }
            }
        } catch (err) {
            this.customErrorLogger('Error in getRecord-' + err.toString(), 'CommonLibraryFunctions', 'error');
        }

        return null;
    },

    /**
     * Utility function that returns a field value of a record.
     * Can be used on both server and client side
     *
     * @param {string} tableName - is the table to be searched
     * @param {string} filterString - is the filter to be used for searching the record
     * @param {string} fieldName - is the name of the field whose value is to be returned
     * @returns {string} - field value of record or blank if record does not exist
     */

    getFieldValue: function(tableName, filterString, fieldName) {
        var answer = '';
        try {
            if (typeof tableName == 'undefined' &amp;&amp; typeof filterString == 'undefined' &amp;&amp; typeof fieldName == 'undefined') {
                tableName = this.getParameter('sysparm_table_name');
                filterString = this.getParameter('sysparm_filter_string');
                fieldName = this.getParameter('sysparm_field_name');
            }
            if (JSUtil.notNil(tableName) &amp;&amp; JSUtil.notNil(filterString) &amp;&amp; JSUtil.notNil(fieldName)) {
                var getRecord = new GlideRecord(tableName);
                getRecord.addEncodedQuery(filterString);
                getRecord.setLimit(1);
                getRecord.query();

                if (getRecord.next()) {
                    answer = getRecord.getValue(fieldName);
                }
            }
        } catch (err) {
            this.customErrorLogger('Error in getFieldValue-' + err.toString(), 'CommonLibraryFunctions', 'error');
        }

        return answer;
    },

    /**
     * Utility function that returns a field value of multiple records. Return data also includes duplicate.
     * Can be used on both server and client side
     *
     * @param {string} tableName - is the table to be searched
     * @param {string} filterString - is the filter to be used for searching the records
     * @param {string} fieldName - is the name of the field whose value is to be returned
     * @returns {string} - a field value of multiple records or blank if records do not exist
     */

	//DESIGN NOTE: Try using getUniqueValue() for larger dataset or if unique value is required.
	
    getRecordsFieldValue: function(tableName, filterString, fieldName) {
        var answer = [];

        try {
            if (typeof tableName == 'undefined' &amp;&amp; typeof filterString == 'undefined' &amp;&amp; typeof fieldName == 'undefined') {
                tableName = this.getParameter('sysparm_table_name');
                filterString = this.getParameter('sysparm_filter_string');
                fieldName = this.getParameter('sysparm_field_name');
            }
            if (JSUtil.notNil(tableName) &amp;&amp; JSUtil.notNil(filterString) &amp;&amp; JSUtil.notNil(fieldName)) {
                var getRecords = new GlideRecord(tableName);
                getRecords.addEncodedQuery(filterString);
                getRecords.query();

                while (getRecords.next()) {
                    answer.push(getRecords.getValue(fieldName));
                }
            }
        } catch (err) {
            this.customErrorLogger('Error in getRecordsFieldValue-' + err.toString(), 'CommonLibraryFunctions', 'error');
        }

        return answer.toString();
    },
	
	/**
     * Utility function that returns list of unique values of records.
     * Can be used on both server and client side
     *
     * @param {string} tableName - is the table to be searched
     * @param {string} filterString - is the filter to be used for searching the record
     * @param {string} fieldName - is the name of the field whose value is to be returned
     * @returns {string} - list of values of multiple records or blank if records do not exist
     */

    getUniqueValue: function(tableName, filterString, fieldName) {
        var answer = [];

        try {
            if (typeof tableName == 'undefined' &amp;&amp; typeof filterString == 'undefined' &amp;&amp; typeof fieldName == 'undefined') {
                tableName = this.getParameter('sysparm_table_name');
                filterString = this.getParameter('sysparm_filter_string');
                fieldName = this.getParameter('sysparm_field_name');
            }
            if (JSUtil.notNil(tableName) &amp;&amp; JSUtil.notNil(filterString) &amp;&amp; JSUtil.notNil(fieldName)) {
                var getRecords = new GlideAggregate(tableName);
                getRecords.addEncodedQuery(filterString);
				getRecords.groupBy(fieldName);
                getRecords.query();

                while (getRecords.next()) {
                    answer.push(getRecords.getValue(fieldName));
                }
            }
        } catch (err) {
            this.customErrorLogger('Error in getUniqueValue-' + err.toString(), 'CommonLibraryFunctions', 'error');
        }

        return answer.toString();
    },

    /**
     * Utility function to execute a scheduled job
     *
     * @param {string} tableName - is the table related to the job to be run
     * @param {string} filterString - is the filter to be used for searching the job
     */

    executeScheduledJob: function(tableName, filterString) {

        try {

            if (typeof tableName == 'undefined' &amp;&amp; typeof filterString == 'undefined') {
                tableName = this.getParameter('sysparm_table_name');
                filterString = this.getParameter('sysparm_filter_string');
            }

            var getScheduledJob = new GlideRecord(tableName);
            getScheduledJob.addEncodedQuery(filterString);
            getScheduledJob.query();
            if (getScheduledJob.next()) {
                SncTriggerSynchronizer.executeNow(getScheduledJob);
            }
        } catch (err) {
            this.customErrorLogger('Error in executeScheduledJob-' + err.toString(), 'CommonLibraryFunctions', 'error');
        }

        return;
    },

    /**
     * Utility function used to log message
     * Can be used on both client and server side.
     *
     * @param {string} message - text of the message
     * @param {string} source - source of the message
     * @param {string} type - optional parameter indicating whether the message is error or info
     */

    customErrorLogger: function(message, source, type) {
        try {
            if (typeof message == 'undefined' &amp;&amp; typeof source == 'undefined') {
                message = this.getParameter('sysparm_message');
                source = this.getParameter('sysparm_source');
                if (JSUtil.notNil(this.getParameter('sysparm_log_type'))) {
                    type = this.getParameter('sysparm_log_type');
                }
            }

            if (JSUtil.notNil(message) &amp;&amp; JSUtil.notNil(source)) {
                if (type == 'error')
                    gs.logError(message, source);
                else if (type == 'info' || JSUtil.nil(type))
                    gs.log(message, source);
            }
        } catch (err) {
            gs.logError('Error in customErrorLogger-' + err.toString(), 'CommonLibraryFunctions');
        }

    },

    type: 'CommonLibraryFunctions'
});]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-01-10 13:21:16&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;25cea0051b5680108ed631d7dc4bcb6b&lt;/sys_id&gt;&lt;sys_mod_count&gt;82&lt;/sys_mod_count&gt;&lt;sys_name&gt;CommonLibraryFunctions&lt;/sys_name&gt;&lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_25cea0051b5680108ed631d7dc4bcb6b&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2020-05-12 12:49:15&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-887933573</payload_hash>
<remote_update_set display_value="CommonLibraryFunctions-V1.0">24f38e201bf01c508ed631d7dc4bcbb5</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2020-05-12 12:50:09</sys_created_on>
<sys_id>64f38e201bf01c508ed631d7dc4bcbb6</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17208ee9d640000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2020-05-12 12:50:09</sys_updated_on>
<table/>
<target_name>CommonLibraryFunctions</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>1bb3c220cdf01c506961f41fe5875518</update_guid>
<update_guid_history>1bb3c220cdf01c506961f41fe5875518:-887933573,a8ae3de812b01c509d8cced070481b92:1003573397,5e7e39688ab01c5089d9d06ce107f5ee:380259772,f93731ec21701c5048de8a34da351c78:1003573397,cde6b9e882701c5005c61d3aa919f50b:1827327537,1e5194f5733b00103c2e5c74f2b36a25:1010315850,39d094f5cb3b001052c1f8c4cba78920:-1189280746,11801871353b00106484c1f2fa9e37ba:1122164809,5740dc35463b0010a93af3b72b4b2e90:-669758535,0fad0871583b00101b92f43bb022c3b2:206627842,de7d407d77f700108a011f3cf5aaaa2a:-2056462085,af3d0831693b001013c1f26a4cda2df7:206627842,630d8c7d97f700107bbbb27b66e577eb:-1580291844,c0bcccfddcf7001072e6d554ed7e2218:1147943379,fd7c007de7f700108c95810db0ed602c:-1223918426,12cb007da7f70010bf5beec29539d0ce:-1556917681,555b0c7d39f700105885188af24d2e98:1046115169,613b047d04f7001038c3971312901f5c:-221371360,1d0b047d22f700106107c4849f207355:1017794738,4dea083d23f7001040cc0eb2d829b879:-1245256344,2aca843943f7001041f93e2a684c2db8:-687273507,f1ba403df7f7001059c3da5f0cce6ef3:1404098286,449a003d60f70010cad9bb4e1e89434a:-1823269961,597ac0f5aaf70010febc06de2bd3e7fa:1986243320,815a403d74f7001015b6f2d7b51a8fad:-793787911,4588803902f70010f079e322b4778fc2:153176125,4758c83597f70010cf3ad72dfcb75f9c:-793787911,59570cf1b3f700101d92a2fd81f1200e:-2024710500,4d2740358bf7001082458d6133e8b2cb:-329085999,2ff60c35fbf7001091608bed73f1b78f:-967513090,6dc6c83527f700101fdb11463d576994:-894747865,f986c4313ef700105daead9153b287ae:200140211,99664035a8f700106c275840b739118f:1738568173,6d36c4b15ff70010bf06e6ca0021777e:-162214711,77f540f14af7001055c7879d09b31c28:-597204176,d8c5c4b17bf70010367028597ac926bb:436683345,e9658475e0b700103e52c35efa959443:451873078,2045c07df9b70010622cae522986bacf:-999212412,f824c8bdebb7001083d4da67ec7a5d4d:886862543,1de0c03923b70010cbcdb0353b20cba9:-1558088724,ae0fb329e6b700102c5bb18dcfb2bfd6:-1269793438,37fb2725b43700103461410384f8458e:299306535,cd796be1a3370010019cb75856514907:-1699217339,ead82fa1573700103564771303056b42:-1329475413,5f986fe1a8370010a4b3d3b5b68c186d:1865157127,d8782be1de370010679ee2181f9d1bf5:857448661,ac6827e18b370010f1fcf256ed84ab9a:1759982130,ef0827ad85f30010b084b3325c0e4b66:-1808798767,c5f7eba1883700107f49b2c6d447deef:-1903488634,11a723ed51f30010115f0acbdb170ae3:-1808798767,3587ef6df3f30010179acb92ea7cb27c:1278979352,78f5a36d84f300100fa2504dcb3e946b:916929519,b8b563ed74f30010010ac49f2fb22701:1238747270,6725e3ad65f30010bf75303970153496:1307067473,9c05af6d8ef30010f8f9006c63632fc9:250417500,5bc4ab2d27f300100d7fcf43cd62c866:-678530697,0f54e7e975f300106583858fdfa7f9b4:250417500,e834efa993f300106241206ed3ce1962:367647093,98f3e7e909f300103d5babe1a2bbb1fb:140974884,377323e98df30010e84ed02cce46e076:1322111173,c563ef694cf30010fdfd200639891020:1276723301,342367a914f3001069d5fe7986da9b5d:1816748385,c1d2e36912f30010a7aba7a0f0f9ef07:-573403049,a5522b691df30010c947cb2ae8139f30:406348417,79122b297bf300105c422ffd2b8284cf:1001480074,26e12f2911f30010aeac4e734ab488dd:-318874358,1bb12329f2f30010188a94cd50156c7e:202474378,67316f254df3001037b7bab0b6f888f0:-1982575894,e3c0a32d2eb300106c3965ef5bc56c69:-166299315,2b20636546f3001086dff372fdbb9fde:219873862,1c7f9325caf30010e6fa41cb1bfa1d5e:414732641,564edba964b30010d5feeeb7aea848ab:-1511495800,8179d7a9eab30010af05f77aac371a3b:-1546716188,d039dba954b3001026a3e9a685480da0:452978504,69f893a1deb3001048b9379cac4adb83:1855661560,83a8d3290ab30010e994a6aaa06bcdad:965758757,79a7d32982b3001015b3396b2d1b37a6:1165816463,6e261f6580b30010d141ca289e1bce88:104900876,78dfe31d6afb801084cd62c9a845da09:-39597862,350e6f55b6fb8010ca3bd1035946f357:873188983,8abff8f4c17b80107621abac4016e04f:-686270279,8ea07845cf56801006c612d954bc7306:-1106002994,558f2c452556801066ece2b622e581b0:1692724162</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Global">global</application>
<category>customer</category>
<comments/>
<name>sys_atf_test_188739ec1b701c508ed631d7dc4bcb51</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_atf_test"><sys_atf_test action="INSERT_OR_UPDATE"><active>true</active><copied_from/><description>This contains unit test for CommonLibraryFunctions scrip include</description><enable_parameterized_testing>false</enable_parameterized_testing><name>Unit Test - CommonLibraryFunctions</name><parameters/><remember/><sys_class_name>sys_atf_test</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2020-05-12 11:56:08</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>188739ec1b701c508ed631d7dc4bcb51</sys_id><sys_mod_count>0</sys_mod_count><sys_name>Unit Test - CommonLibraryFunctions</sys_name><sys_package display_value="Global" source="global">global</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="Global">global</sys_scope><sys_update_name>sys_atf_test_188739ec1b701c508ed631d7dc4bcb51</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2020-05-12 11:56:08</sys_updated_on></sys_atf_test><sys_variable_value action="delete_multiple" query="document_key=188739ec1b701c508ed631d7dc4bcb51"/></record_update>]]></payload>
<payload_hash>-705274115</payload_hash>
<remote_update_set display_value="CommonLibraryFunctions-V1.0">24f38e201bf01c508ed631d7dc4bcbb5</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2020-05-12 12:50:09</sys_created_on>
<sys_id>a0f38e201bf01c508ed631d7dc4bcbb6</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17208bdfe320000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2020-05-12 12:50:09</sys_updated_on>
<table/>
<target_name>Unit Test - CommonLibraryFunctions</target_name>
<type>Test</type>
<update_domain>global</update_domain>
<update_guid>6d97bdac6e701c5050bfd72b0c0cdeca</update_guid>
<update_guid_history>6d97bdac6e701c5050bfd72b0c0cdeca:-705274115</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Global">global</application>
<category>customer</category>
<comments/>
<name>sys_atf_step_1688fde81b701c508ed631d7dc4bcb6f</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_atf_step"><sys_atf_step action="INSERT_OR_UPDATE"><active>true</active><copied_from/><description>Run Server Side Validation Script</description><display_name>Run Server Side Script</display_name><inputs/><mugshots_cache_json/><notes/><order>1</order><snapshot/><step_config display_value="Run Server Side Script">41de4a935332120028bc29cac2dc349a</step_config><sys_class_name>sys_atf_step</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2020-05-12 12:00:25</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>1688fde81b701c508ed631d7dc4bcb6f</sys_id><sys_mod_count>10</sys_mod_count><sys_name>Run Server Side Script</sys_name><sys_package display_value="Global" source="global">global</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="Global">global</sys_scope><sys_update_name>sys_atf_step_1688fde81b701c508ed631d7dc4bcb6f</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2020-05-12 12:37:47</sys_updated_on><table/><test display_value="Unit Test - CommonLibraryFunctions">188739ec1b701c508ed631d7dc4bcb51</test><timeout/><warning_message/></sys_atf_step><sys_variable_value action="delete_multiple" query="document_key=1688fde81b701c508ed631d7dc4bcb6f"/><sys_variable_value action="INSERT_OR_UPDATE"><document>sys_atf_step</document><document_key>1688fde81b701c508ed631d7dc4bcb6f</document_key><order>100</order><sys_class_name>sys_variable_value</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2020-05-12 12:00:25</sys_created_on><sys_id>9498bde81b701c508ed631d7dc4bcbb6</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>admin</sys_updated_by><sys_updated_on>2020-05-12 12:00:25</sys_updated_on><value>3.1</value><variable display_value="">42f2564b73031300440211d8faf6a777</variable></sys_variable_value><sys_variable_value action="INSERT_OR_UPDATE"><document>sys_atf_step</document><document_key>1688fde81b701c508ed631d7dc4bcb6f</document_key><order>200</order><sys_class_name>sys_variable_value</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2020-05-12 12:00:25</sys_created_on><sys_id>d098b5601bb01c508ed631d7dc4bcb05</sys_id><sys_mod_count>10</sys_mod_count><sys_updated_by>admin</sys_updated_by><sys_updated_on>2020-05-12 12:37:47</sys_updated_on><value>(function(outputs, steps, stepResult, assertEqual) {&#13;
	describe('Unit tests for CommonLibraryFunctions', function() {&#13;
		&#13;
		//beforeEach seems to be slower. So leaving the variables inside describe.&#13;
		var library = new CommonLibraryFunctions();&#13;
		var userID = gs.getUserID();&#13;
		var userName = gs.getUserName();&#13;
		&#13;
		it('hasValidRecord return true', function() {&#13;
			expect(library.hasValidRecord('sys_user','sys_id='+userID)).toBe(true);&#13;
		});&#13;
		&#13;
		it('hasValidRecord return false', function() {&#13;
			expect(library.hasValidRecord('sys_user','user_name=x')).toBe(false);&#13;
		});&#13;
		&#13;
		it('getRecord return valid data', function() {&#13;
			expect(library.getRecord('sys_user','sys_id='+userID)).not.toBeNull();&#13;
		});&#13;
		&#13;
		it('getRecord return invalid data', function() {&#13;
			expect(library.getRecord('sys_user','user_name=x')).toBeNull();&#13;
		});&#13;
		&#13;
		it('getFieldValue return valid data', function() {&#13;
			expect(library.getFieldValue('sys_user','sys_id='+userID,'user_name')).toEqual(userName);&#13;
		});&#13;
		&#13;
		it('getFieldValue return invalid data', function() {&#13;
			expect(library.getFieldValue('sys_user','user_name=x','user_name')).toEqual('');&#13;
		});&#13;
		&#13;
		it('getRecordsFieldValue return valid data', function() {&#13;
			expect(library.getRecordsFieldValue('sys_user','active=true','name')).toBeTruthy();&#13;
		});&#13;
		&#13;
		it('getRecordsFieldValue return invalid data', function() {&#13;
			expect(library.getRecordsFieldValue('sys_user','user_name=x','name')).toBeFalsy();&#13;
		});&#13;
		&#13;
		it('getUniqueValue return valid data', function() {&#13;
			expect(library.getUniqueValue('sys_user','active=true','name')).toBeTruthy();&#13;
		});&#13;
		&#13;
		it('getUniqueValue return invalid data', function() {&#13;
			expect(library.getUniqueValue('sys_user','user_name=x','name')).toBeFalsy();&#13;
		});&#13;
			&#13;
	});&#13;
	&#13;
})(outputs, steps, stepResult, assertEqual);&#13;
&#13;
jasmine.getEnv().execute();&#13;
</value><variable display_value="">989d9e235324220002c6435723dc3484</variable></sys_variable_value></record_update>]]></payload>
<payload_hash>-587922187</payload_hash>
<remote_update_set display_value="CommonLibraryFunctions-V1.0">24f38e201bf01c508ed631d7dc4bcbb5</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2020-05-12 12:50:09</sys_created_on>
<sys_id>a8f38e201bf01c508ed631d7dc4bcbb5</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17208e41f8c0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2020-05-12 12:50:09</sys_updated_on>
<table/>
<target_name>Run Server Side Script</target_name>
<type>Test Step</type>
<update_domain>global</update_domain>
<update_guid>6f114eac11b01c509f5711785fe480f2</update_guid>
<update_guid_history>6f114eac11b01c509f5711785fe480f2:-587922187,51800e2cfab01c50976fb9431c7e674e:2093257247,cd700eac87b01c50269f92196707186d:-2017653522,74afb5e40fb01c5073e4f2977e7b4903:1109770157,d17f3d2c3bb01c506344a675097af446:-552582014,313d31e4d4b01c509e538a87269e44d0:1396218728,c6fcf928a3b01c505a28b88a6b932a07:-1547061550,c1bc396451b01c508219669af2d2cbc5:285057740,39fb75e4e4b01c509e1a84297d3e55e0:-937918743,0a4ab52402b01c507e9e4b9a393d58d1:1069279774,1098b560e4b01c50dc4973e11ae61c07:1061649755</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
</unload>
